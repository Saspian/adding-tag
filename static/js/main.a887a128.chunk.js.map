{"version":3,"sources":["Components/InputField.js","Components/index.js","App.js","serviceWorker.js","index.js"],"names":["InputField","changeHandler","resetValue","values","showOptions","addOptions","className","type","name","value","id","onChange","aria-describedby","onClick","Form","useState","q","setValues","showWhenOptionTyped","document","querySelector","style","display","showWhenEmpty","useEffect","querySelectorAll","forEach","options","addEventListener","textContent","e","target","classList","toggle","newOptions","createElement","appendChild","createTextNode","del","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","contains","console","log","add","remove","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PA0BeA,EAvBI,SAAC,GAAkE,IAAjEC,EAAgE,EAAhEA,cAAeC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,WAEjE,OACA,6BACI,8BACA,2BAAOC,UAAU,kBACjB,yBAAKA,UAAU,8BACX,2BAAOC,KAAK,OAAOC,KAAK,IAAIC,MAAON,EAAQG,UAAU,+BAA+BI,GAAG,aAAaC,SAAUV,EAAeW,mBAAiB,iBAC9I,yBAAKN,UAAU,sBACX,4BAAQA,UAAU,wCAAwCC,KAAK,SAASM,QAASR,IACjF,4BAAQC,UAAU,wCAAwCC,KAAK,SAASM,QAASX,IACjF,4BAAQI,UAAU,sCAAsCC,KAAK,SAASM,QAAST,OAInF,yBAAKE,UAAU,WACX,kDACA,yDACA,oEC+CDQ,EAjEF,WAAO,IAAD,EAEaC,mBAAS,CACjCC,EAAG,KAHQ,mBAERb,EAFQ,KAEAc,EAFA,KAMTC,EAAsB,WACxBC,SAASC,cAAc,oBAAoBC,MAAMC,QAAU,QAC3DH,SAASC,cAAc,kBAAkBC,MAAMC,QAAU,OACzDH,SAASC,cAAc,oBAAoBC,MAAMC,QAAU,SAEzDC,EAAgB,WAClBJ,SAASC,cAAc,kBAAkBC,MAAMC,QAAU,QACzDH,SAASC,cAAc,oBAAoBC,MAAMC,QAAU,OAC3DH,SAASC,cAAc,oBAAoBC,MAAMC,QAAU,QAG/DE,qBAAU,WACQ,KAAXrB,EAAOa,EACNO,IAEDL,IAEHC,SAASM,iBAAiB,QAAQC,SAAQ,SAAAC,GACtCA,EAAQC,iBAAiB,SAAQ,WAC7BX,EAAU,eAAId,EAAL,CAAaa,EAAIW,EAAQE,wBAiC9C,OACI,yBAAKvB,UAAU,OACX,kBAAC,EAAD,CAAYL,cA3BE,SAAC6B,GACnBb,EAAU,eAAId,EAAL,eAAc2B,EAAEC,OAAOvB,KAAOsB,EAAEC,OAAOtB,SAChDS,KAyB8ChB,WAvB7B,SAAA4B,GACjBb,EAAU,eAAId,EAAL,CAAaa,EAAI,MACZ,KAAXb,EAAOa,GACNO,KAoBoEpB,OAAQA,EAAOa,EAAGZ,YA9B1E,SAAA0B,GAChBX,SAASC,cAAc,YAAYY,UAAUC,OAAO,iBA6BgE5B,WAjBrG,WACf,IAAI6B,EAAaf,SAASgB,cAAc,QACxCD,EAAW5B,UAAY,kBACvB4B,EAAWE,YAAYjB,SAASkB,eAAelC,EAAOa,IAEtDG,SAASC,cAAc,kBAAkBgB,YAAYF,GAErD,IAAII,EAAMnB,SAASgB,cAAc,KACjCG,EAAIhC,UAAU,wBACdgC,EAAIF,YAAYjB,SAASkB,eAAe,KAExCH,EAAWE,YAAYE,QC3ChBC,MATf,WACE,OACE,yBAAKjC,UAAU,iBACf,oCACE,kBAAC,EAAD,QCGckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAAS4B,eAAe,SAGjDN,OAAOb,iBAAiB,SAAQ,SAACE,GACzBX,SAASC,cAAc,eAAe4B,SAASlB,EAAEC,SAAaZ,SAASC,cAAc,kBAAkB4B,SAASlB,EAAEC,QAC/GZ,SAASC,cAAc,YAAYY,UAAUgB,SAAS,gBACrDC,QAAQC,IAAI,uBAGZ/B,SAASC,cAAc,YAAYY,UAAUmB,IAAI,gBAIlDhC,SAASC,cAAc,YAAYY,UAAUgB,SAAS,iBACrD7B,SAASC,cAAc,YAAYY,UAAUoB,OAAO,mBD+G1D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a887a128.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst InputField = ({changeHandler, resetValue, values, showOptions, addOptions}) => {\r\n\r\n    return(\r\n    <div>\r\n        <form>\r\n        <label className=\"selected-area\"></label>\r\n        <div className=\"form-container input-group\">\r\n            <input type=\"text\" name=\"q\" value={values} className=\"form-control form-control-lg\" id=\"form-input\" onChange={changeHandler} aria-describedby=\"basic-addon2\"/>\r\n            <div className=\"input-group-append\">\r\n                <button className=\"btn btn-secondary fas fa-check-circle\" type=\"button\" onClick={addOptions}></button>\r\n                <button className=\"btn btn-secondary fas fa-times-circle\" type=\"button\" onClick={resetValue}></button>\r\n                <button className=\"btn btn-secondary fas fa-angle-down\" type=\"button\" onClick={showOptions}></button>   \r\n            </div>           \r\n        </div>\r\n        </form>\r\n            <div className=\"options\">\r\n                <span>Default Text One</span>\r\n                <span>Longer Default Text One</span>\r\n                <span>Very Very Long Default Text One</span>\r\n            </div>\r\n    </div>\r\n    )\r\n}\r\nexport default InputField;\r\nInputField.propTypes = {\r\n    changeHandler: PropTypes.func,\r\n    resetValue: PropTypes.func,\r\n    values: PropTypes.string,\r\n    showOptions: PropTypes.func,\r\n    addOptions: PropTypes.func\r\n}\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport Inputfield from './InputField';\r\n\r\nconst Form = () => {\r\n\r\n    const [values, setValues] = useState({\r\n        q: ''\r\n    });\r\n\r\n    const showWhenOptionTyped = () => {\r\n        document.querySelector('.fa-times-circle').style.display = \"block\";\r\n        document.querySelector('.fa-angle-down').style.display = \"none\";\r\n        document.querySelector('.fa-check-circle').style.display = \"block\";\r\n    }\r\n    const showWhenEmpty = () => {\r\n        document.querySelector('.fa-angle-down').style.display = \"block\";\r\n        document.querySelector('.fa-times-circle').style.display = \"none\";\r\n        document.querySelector('.fa-check-circle').style.display = \"none\";\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(values.q==='') {\r\n            showWhenEmpty();\r\n        }else{\r\n           showWhenOptionTyped();\r\n        }\r\n        document.querySelectorAll('span').forEach(options => {\r\n            options.addEventListener('click',()=>{\r\n                setValues({...values, q : options.textContent});\r\n            })\r\n        })\r\n    })\r\n\r\n    const showOptions = e => {\r\n        document.querySelector('.options').classList.toggle('show-options');\r\n    }\r\n    const changeHandler = (e) => {\r\n        setValues({...values, [e.target.name]: e.target.value});\r\n        showWhenOptionTyped();\r\n    }\r\n    const clearOptions = e => {\r\n        setValues({...values, q : ''});\r\n        if(values.q==='') {\r\n            showWhenEmpty();\r\n        }\r\n    }\r\n    const addOptions = () => {\r\n        var newOptions = document.createElement('span');\r\n        newOptions.className = 'selectedOptions';\r\n        newOptions.appendChild(document.createTextNode(values.q));\r\n        \r\n        document.querySelector('.selected-area').appendChild(newOptions);\r\n\r\n        var del = document.createElement('i');\r\n        del.className='fas fa-times selected';\r\n        del.appendChild(document.createTextNode(''));\r\n\r\n        newOptions.appendChild(del);\r\n    }\r\n    // console.log(values,\"@@\");\r\n\r\n    return (\r\n        <div className=\"box\">\r\n            <Inputfield changeHandler={changeHandler} resetValue={clearOptions} values={values.q} showOptions={showOptions} addOptions={addOptions}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport './App.css';\n\nimport Inputfield from './Components';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n    <h2>Test</h2>\n      <Inputfield />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// FOR EVENT HANDELING\nwindow.addEventListener('click',(e)=>{\n    if((document.querySelector('#form-input').contains(e.target)) || (document.querySelector('.fa-angle-down').contains(e.target))){\n        if(document.querySelector('.options').classList.contains('show-options')) {\n            console.log('it is already shown');\n        }\n        else{\n            document.querySelector('.options').classList.add('show-options');\n        }\n    }\n    else{\n        if(document.querySelector('.options').classList.contains('show-options')) {\n            document.querySelector('.options').classList.remove('show-options');\n        }\n    }\n})\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}